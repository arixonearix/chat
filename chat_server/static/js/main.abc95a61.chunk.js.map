{"version":3,"sources":["components/NameInput.js","components/LoginButton.js","components/Main.js","reducers/index.js","reducers/types.js","serviceWorker.js","containers/LoginButtonContainer.js","components/Message.js","components/ChatWindow.js","components/ChatInput.js","components/MainChat.js","components/Holder.js","index.js","logo.svg"],"names":["NameInput","props","state","login","event","this","setState","target","value","updateLogin","className","type","onChange","handleChange","bind","React","Component","LoginButton","console","log","onClick","sendLogin","Main","window","socket","emit","switchPages","src","logo","alt","allReducers","combineReducers","types","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","connect","dispatch","click","info","Message","nickname","message","ChatWindow","list","messages","map","index","key","ChatInput","tempMessage","handleMessage","sendMessage","refs","chatInput","ref","onKeyDown","handleKeyDown","MainChat","on","push","data","toastr","Holder","trigger","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.abc95a61.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass NameInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            login: ''\n        };\n    }\n    handleChange(event) {\n        this.setState({login: event.target.value});\n        this.props.updateLogin(event.target.value);\n    }\n    render() {\n        return <div className={'input-holder'}>\n            <input\n                type=\"text\"\n                className={'form-control'}\n                onChange={this.handleChange.bind(this)}\n            />\n        </div>\n    };\n}\n\nexport default NameInput;\n","import React from 'react';\nimport '../App.css';\n\nclass LoginButton extends React.Component {\n    render() {\n        console.log(this.props);\n        return <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={this.props.sendLogin}\n        >Login</button>\n    };\n}\n\nexport default LoginButton;\n","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NameInput from \"./NameInput\";\nimport LoginButton from \"../components/LoginButton\";\n\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            login: '',\n            switchPages: props.switchPages\n        };\n    }\n    updateLogin = (login) => {\n        this.setState({ login: login });\n    };\n\n    sendLogin = () => {\n        window.socket.emit('login', this.state.login);\n        this.state.switchPages(true);\n    };\n\n    render() {\n        return <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <div className={'name-input-holder'}>\n                    <NameInput updateLogin={this.updateLogin}/>\n                    <LoginButton login={this.state.login} sendLogin={this.sendLogin}/>\n                </div>\n\n            </header>\n        </div>\n    };\n}\n\nexport default Main;\n","import {combineReducers} from \"redux\";\r\nimport TypeReducers from './types';\r\n\r\nconst allReducers = combineReducers({\r\n    types: TypeReducers\r\n});\r\n\r\nexport default allReducers;","export default function () {\r\n    return [\r\n        {\r\n            type: 1\r\n        },\r\n        {\r\n            type: 2\r\n        }\r\n    ];\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport LoginButton from \"../components/LoginButton\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        click: info => {\r\n            dispatch();\r\n        }\r\n    };\r\n};\r\nconst mapStateToProps = (state, props) => {\r\n\r\n    return {\r\n        login: props.login,\r\n        socket: props.socket\r\n    };\r\n};\r\n\r\nexport default connect(mapDispatchToProps, mapStateToProps) (LoginButton);","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass Message extends React.Component {\n    render() {\n        return <div>\n            <span className={'badge badge-secondary'}>{this.props.nickname}: </span>\n            <span>{this.props.message} </span>\n        </div>\n    };\n}\n\nexport default Message;\n","import React from 'react';\r\nimport '../App.css';\r\nimport Message from \"./Message\";\r\n\r\nclass ChatWindow extends React.Component {\r\n\r\n    render() {\r\n        let list = this.props.messages.map((message ,index) => {\r\n            return <div key={index}>\r\n                <Message nickname={message.nickname} message={message.message} />\r\n            </div>\r\n        });\r\n        return <div className={'chat-holder'}>\r\n            {list}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ChatWindow;\r\n","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass ChatInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tempMessage: ''\n        };\n    }\n    handleChange(event) {\n        // this.setState({tempMessage: event.target.value});\n        this.props.handleMessage(event.target.value);\n    }\n    handleKeyDown(event) {\n        if (event.key === 'Enter') {\n            this.sendMessage();\n        }\n    }\n    sendMessage() {\n        this.props.sendMessage();\n        this.refs.chatInput.value = '';\n    }\n    render() {\n        return <div className={'input-holder'}>\n            <input\n                ref=\"chatInput\"\n                type=\"text\"\n                className={'form-control chat-input-text'}\n                onChange={this.handleChange.bind(this)}\n                onKeyDown={this.handleKeyDown.bind(this)}\n            />\n            <button\n                className={'chat-input-button'}\n                onClick={this.sendMessage.bind(this)}\n            >SEND</button>\n        </div>\n    };\n}\n\nexport default ChatInput;\n","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NameInput from \"./NameInput\";\nimport LoginButton from \"../containers/LoginButtonContainer\";\nimport ChatWindow from \"./ChatWindow\";\nimport ChatInput from \"./ChatInput\";\n\nclass MainChat extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            login: props.login,\n            tempMessage: '',\n            messages: [\n                {nickname:'Server', message:'Welcome message!'}\n            ]\n        };\n    }\n\n    componentWillMount() {\n        window.socket.on('message', (message) => {\n            this.setState(state => {\n                state.messages.push(message);\n                return {\n                    messages: state.messages,\n                    tempMessage: state.tempMessage\n                };\n            });\n        });\n        window.socket.on('notification', (data) => {\n            window.toastr.info(data.message);\n        });\n    }\n\n    handleChange(message) {\n        this.setState({tempMessage: message});\n    }\n    sendMessage() {\n        if(this.state.tempMessage) {\n            window.socket.emit('message', this.state.tempMessage);\n        } else {\n            console.log('Enter message');\n        }\n    }\n    render() {\n        console.log(this.state);\n        let messages = this.state.messages;\n        return <div className=\"App\">\n                <ChatWindow messages={messages} />\n                <ChatInput sendMessage={this.sendMessage.bind(this)} handleMessage={this.handleChange.bind(this)} />\n        </div>\n    };\n}\n\nexport default MainChat;\n","import React from 'react';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainChat from \"./MainChat\";\nimport Main from \"./Main\";\n\nclass Holder extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            trigger: false\n        };\n    }\n    switchPages(trigger) {\n        this.setState({trigger: trigger});\n    }\n\n    render() {\n        return <div>\n            {this.state.trigger\n                ? <MainChat login={'max'} />\n                : <Main switchPages={this.switchPages.bind(this)}/>\n            }\n        </div>\n    };\n}\n\nexport default Holder;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './toastr.css';\nimport Main from \"./components/Main\";\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport allReducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport Holder from \"./components/Holder\";\n\n\nconst store = createStore(allReducers);\n// const component = false\n//     ? <MainChat login={'max'} />\n//     : <Main />;\n\nReactDOM.render(\n    <Provider store={store} >\n        <Holder />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}